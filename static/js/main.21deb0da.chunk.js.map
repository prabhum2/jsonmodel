{"version":3,"sources":["xdm2.js","LeftPanel.jsx","rightPanel.jsx","Schema2.jsx","App.js","reportWebVitals.js","index.js"],"names":["getFirstValueFromMap","jsonObject","objKey","Object","keys","console","log","getFirstKeyFromMap","LeftPanel","props","renderHighLevelProperty1","val","i","plusProperty","mainIndex","objVal","keyValues","split","nestedValues","type","hasOwnProperty","i2","properties","length","push","style","marginLeft","onClick","plusHandlerFactory","width","id","variant","name","placeholder","defaultValue","value","onChange","updateHandlerFactory","title","description","examples","clickDeleteFunction","map","nv","ni","clickFunction","index","currentIndex","deleteProperty","schemaNameTextfield","obj","schemaname","jsonData","class","$id","setschemaName","e","onSchemaChange","display","flexDirection","overflow","schemas","propertiesVal","definitions","minimized","border","height","minWidth","background","borderRadius","margin","padding","justifyContent","marginEnd","onPress","onWindowAction","primaryActionLabel","onPrimaryAction","deleteSchema","cancelLabel","position","onSelectionChange","onmixinChange","marginTop","onClassChange","onMetaStatusChange","addDynamicPropertyRow","index1","RightPanel","useState","setJsonData","setMinimized","prTitle","setPrTitle","prBody","setPrBody","prBranch","setPrBranch","prUsername","setPrUsername","createPullRequest","require","octokit","Octokit","plugin","auth","process","useEffect","jsonString","JSON","stringify","replace","schemaName","copy","parse","undefined","onChangeJson","str","IsValidJSONString","getobjectfromJson","backgroundColor","right","bottom","zIndex","close","alignItems","gap","label","autoFocus","files","behaviour","alert","xdmPah","content","owner","repo","body","base","head","changes","commit","then","pr","data","number","createPR","locale","confirmGood","jsObject","colors","string","baseObject","Schema2","setbehaviour","setCurrentIndex","schemaObjects","setSchemaObjects","handleInputChange","changingProp","schemaObjectsCopy","keyobj","toString","definationCopy","includes","objectkey","expectedProperty","keysArr","old_key","old_keys","new_key","currentObject","intVal","isNaN","currentval","parseInt","defineProperty","getOwnPropertyDescriptor","updateValue","handlePlusChange","target","definitionName","plusHandler","activeSchemaCopy1","newDefinitions","onAddSchema","a","schemaObjectsCP","latestIndex","classSchema","mixinSchema","color","textAlign","paddingTop","schemaType","marginBottom","UNSAFE_style","layout","isMinimized","allOf","onSchemaChangeHandler","schemObjectsCP","filter","item","onDeleteSchema","currentindex","result","lastindex","splice","deleteProp","size","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","theme","defaultTheme","colorScheme","document","getElementById"],"mappings":"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","file":"static/js/main.21deb0da.chunk.js","sourcesContent":["export let getDefaultDefinitions = () => {\n    return {\n        \"definitionName\": {\n            \"properties\": []\n        }\n    };\n}\n\nexport let finalJsonOutput = (jsonObject , params) => {\n    console.log(\"================finalJsonOutput==================\");\n\n    const jsonData = {\n\n        \"meta:license\": [\n            \"Copyright 2020 Adobe Systems Incorporated. All rights reserved.\",\n            \"This work is licensed under a Creative Commons Attribution 4.0 International (CC BY 4.0) license\",\n            \"you may not use this file except in compliance with the License. You may obtain a copy\",\n            \"of the License at https://creativecommons.org/licenses/by/4.0/\"\n        ],\n        \"$id\": `https://ns.adobe.com/xdm/${params.schemaType}/${params.schemaName}`,\n        \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n        \"title\": params.title,\n        \"type\": \"object\",\n        \"meta:extensible\": true,\n        \n        // \"meta:abstract\": true,\n        // \"definitions\": {\n        //     [params.schemaName] : jsonObject.definitionName\n        // }\n    }\n\n    let metaAbstract = false\n    if (params.schemaType === \"Class\" || params.schemaType === \"Mixin\") {\n        metaAbstract = true\n    } else {\n        metaAbstract = false\n    }\n\n    jsonData[\"meta:abstract\"] = metaAbstract\n    if (params.schemaType === \"Class\") {\n        jsonData[\"meta:extends\"] = [`https://ns.adobe.com/xdm/data/${params.behaviour}`]\n        // \"https://ns.genesis.com/xdm/common/auditable\" ];\n    }\n    if (params.schemaType === \"Mixin\") {\n        jsonData[\"meta:intendedToExtend\"] = [`https://ns.adobe.com/xdm/classes/${params.behaviour}`]\n        // \"https://ns.genesis.com/xdm/common/auditable\" ];\n    }\n    jsonData[\"description\"] = params.description\n    jsonData[\"definition\"] = {\n        [params.schemaName] : params.definition.definitionName\n    }\n    jsonData['allOf'] = [{ \"$ref\": `#/definitions/${params.schemaName}` }];\n    jsonData[\"meta:status\"] = params.metaStatus;\n    return jsonData\n}\n\nexport let addPropertyHandler = (jsonObject) => {\n    console.log(\"json changed\",jsonObject);\n    const propertiesVal = getFirstValueFromMap(jsonObject)\n    propertiesVal.properties.push({\n        ':': {\n            'title' : \"\",\n            'type' : \"\",\n            'description' :\"\",\n            'examples' : \"\"\n        }\n    });\n    return jsonObject;\n};\n\nexport let getFirstValueFromMap = (jsonObject) => {\n    const objKey = Object.keys(jsonObject)[0];\n    console.log(\"obj\",objKey);\n    return jsonObject[objKey];\n}\n\nexport let getFirstKeyFromMap = (jsonObject) => {\n    return Object.keys(jsonObject)[0];\n}\n\nexport let  plusHandler = (jsonObject,objectkey) => {\n    let expectedProperty = jsonObject.definitionName;\n    objectkey = objectkey + \"\";\n    const keysArr = objectkey.split(\".\");       //0,0 =0.0\n    for(let i = 0; i < keysArr.length; i++){\n        expectedProperty = getFirstValueFromMap(expectedProperty.properties[keysArr[i]]);  //0 end val\n    }\n    expectedProperty.type = \"object\";\n    if(!expectedProperty.properties){\n        expectedProperty.properties = [];\n    }\n    expectedProperty.properties.push(\n        {\n            ':': {\n                'title' : \"\",\n                'type' : \"\",\n                'description' :\"\",\n                'examples':\"\"\n            }\n        }\n    );\n    return jsonObject;\n}\n\nexport let updateValue = (jsonObject , objectkey , changingProp, val) => {\n    const propertiesVal = getFirstValueFromMap(jsonObject)\n    let expectedProperty = propertiesVal;\n    objectkey = objectkey + \"\";\n    const keysArr = objectkey.split(\".\");\n    expectedProperty = expectedProperty.properties[keysArr[0]];\n    for(let i = 1; i < keysArr.length; i++){\n        expectedProperty = getFirstValueFromMap(expectedProperty);\n        expectedProperty = expectedProperty.properties[keysArr[i]];  //0 end val\n    }\n    let old_key = null;\n    let old_keys = null;\n    let new_key = null;\n\n    const currentObject = getFirstValueFromMap(expectedProperty);\n\n    switch(changingProp){\n        case \"title\":\n            currentObject.title = val;\n            break;\n        case \"type\":\n            currentObject.type = val;\n            break;\n        case \"description\":\n            currentObject.description = val;\n            break;\n            case \"examples\" :\n                val = val.split(\",\");\n            //    if (currentObject.type === \"integer\"){\n                let intVal = [];\n                for(let i = 0; i<val.length;i++){\n                    if (val[i] !==\"\"){\n                        if(isNaN(val[i])){\n                            intVal.push(val[i])\n                        }else{\n                            let currentval = parseInt(val[i])\n                            intVal.push(currentval)\n                        }\n                       \n                    }else{\n                        intVal.push(val[i])\n                    }\n                   \n                }\n                \n                currentObject.examples = intVal;\n            //    }else{\n                \n            //     currentObject.examples = val;\n            //    }\n                break;\n        case \"keyT\":\n             old_key = getFirstKeyFromMap(expectedProperty);\n             old_keys = old_key.split(\":\");\n             new_key = `${val}:${old_keys[1]}`;\n            Object.defineProperty(expectedProperty, new_key,\n                Object.getOwnPropertyDescriptor(expectedProperty, old_key));\n            delete expectedProperty[old_key];\n            break;\n        case \"keyN\":\n            old_key = getFirstKeyFromMap(expectedProperty);\n             old_keys = old_key.split(\":\");\n             new_key = `${old_keys[0]}:${val}`;\n            Object.defineProperty(expectedProperty, new_key,\n                Object.getOwnPropertyDescriptor(expectedProperty, old_key));\n            delete expectedProperty[old_key];\n            break;\n    }\n    return jsonObject;\n}\n\nexport let deleteProp = (jsonObject,objectkey) => {\n    \n    let expectedProperty = jsonObject.definitionName;\n    var keyobj = objectkey.toString();\n    if (keyobj.includes(\".\")){\n        objectkey = objectkey + \"\";\n    const keysArr = objectkey.split(\".\");\n    expectedProperty = expectedProperty.properties[keysArr[0]];\n    for(let i = 1; i < keysArr.length-1; i++){\n        expectedProperty = getFirstValueFromMap(expectedProperty);\n        expectedProperty = expectedProperty.properties[keysArr[i]]; \n        console.log(expectedProperty)\n\n        //0 end val\n    }\n    let lastindex = objectkey[objectkey.length-1]\n    console.log(lastindex);\n    let val = getFirstValueFromMap( expectedProperty)\n    console.log('vallllllllllll', val);\n    val.properties.splice(lastindex)\n    val.type = \"string\"\n    }else{\n        expectedProperty.properties.splice(objectkey,1)\n        // expectedProperty.type = \"string\"\n    }\n    \n    return jsonObject\n}\n\n","import React, { useState, useEffect, useReducer } from \"react\";\nimport 'primeicons/primeicons.css';\nimport 'primereact/resources/themes/saga-blue/theme.css';\nimport 'primereact/resources/primereact.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport IconAdd from '@spectrum-icons/workflow/Add';\nimport Delete from '@spectrum-icons/workflow/Delete';\n\nimport {Button} from '@adobe/react-spectrum'\nimport {  getFirstValueFromMap,getFirstKeyFromMap } from \"./xdm2\";\nimport { ActionButton, DialogTrigger, Flex, Text, TextField, AlertDialog,Picker, Item, Section } from '@adobe/react-spectrum'\nimport './Dropdown.css';\nimport DeleteOutline from \"@spectrum-icons/workflow/DeleteOutline\";\nimport Minimize from \"@spectrum-icons/workflow/Minimize\";\nimport Maximize from \"@spectrum-icons/workflow/Maximize\";\n\nconst LeftPanel = (props) => {\n\n    const renderHighLevelProperty1 = (val, i, plusProperty,mainIndex) => {\n        console.log(\"Object Key =====\" + i);\n        const objKey = Object.keys(val)[0];\n        const objVal = val[objKey];\n        const keyValues = objKey.split(\":\");\n        let nestedValues = [];\n        if (objVal.type == \"object\") {\n            if (objVal.hasOwnProperty(\"properties\")){\n                for (let i2 = 0; i2 < objVal.properties.length; i2++)\n                nestedValues.push(renderHighLevelProperty1(objVal.properties[i2], i + \".\" + i2, true,mainIndex));\n            }\n            \n        }\n        return (\n            <div style={{ marginLeft: '2.25rem' }}>\n                {plusProperty ? <span style={{ marginLeft: '2.25rem' }} ></span> : null}\n              \n                <Button onClick={props.plusHandlerFactory(i,mainIndex)} width = '10px'><IconAdd/></Button>\n              \n                <TextField   width= '160px'\n                    id=\"outlined-basic\"  variant=\"outlined\" name=\"propertyNamespace\" placeholder = \"Property Namespace\"\n                    defaultValue=''//value={keyValues[0]}\n                    value={keyValues[0]}\n                    onChange={props.updateHandlerFactory(\"keyT\", i)} />\n                <TextField   width= '120px' \n                    id=\"outlined-basic\" placeholder=\"Property Name\" variant=\"outlined\" name=\"propertyName\"\n                    value={keyValues[1]}\n                    onChange={props.updateHandlerFactory(\"keyN\", i)} />\n                <TextField  width= '120px' \n                    id=\"outlined-basic\" placeholder=\"Property Title\" variant=\"outlined\" name=\"propertyTitle\"\n                    value={objVal.title}\n                    onChange={props.updateHandlerFactory(\"title\", i)} />\n                <TextField   width= '150px' \n                    id=\"outlined-basic\" placeholder=\"Property Data Type\" variant=\"outlined\" name=\"propertyType\"\n                    value={objVal.type}\n                    onChange={props.updateHandlerFactory(\"type\", i)} />\n                <TextField  width= '150px'\n                    id=\"outlined-basic\" placeholder=\"Property Description\" variant=\"outlined\" name=\"propertyDescription\"\n                    value={objVal.description}\n                    onChange={props.updateHandlerFactory(\"description\", i)} />\n                     <TextField width= '100px' \n                    id=\"outlined-basic\" placeholder =\"examples\" variant=\"outlined\" name=\"examples\"\n                    value={objVal.examples}\n                    onChange={props.updateHandlerFactory(\"examples\", i)} />\n                     <Button  onClick={clickDeleteFunction( i,mainIndex)} width = '10px'><Delete/></Button>\n                     <br/><br/>\n               \n                {nestedValues.map((nv, ni) => {\n                    console.log(\"nv\", ni);\n                    return nv\n                })}\n            </div>\n        )\n    }\n\n    const clickFunction =(index) => {\n        return () => {\n            console.log(\"function index==\",index);\n            props.currentIndex(index);\n            // props.setActiveSchema(index);\n        }\n    }\n\n    const clickDeleteFunction = ( i,mainIndex) => {\n        console.log(\"delete click call => \", i, mainIndex);\n        return () => {\n            console.log(\"delete actual call => \", i, mainIndex);\n            props.deleteProperty( i,mainIndex)\n        }\n    }\n   \n    const schemaNameTextfield = (obj,index) => {\n        let schemaname = obj.jsonData.class.$id\n        let val = schemaname.split('/');\n       schemaname = val[val.length-1]\n       props.setschemaName(schemaname)\n     return    <TextField\n     placeholder={obj.type === \"class\" ? \"Class Name\" : obj.type === \"mixin\" ? \"Mixin Name\" : \"Datatype Name\"}\n        name=\"schemaName\"\n        id=\"schemaName\"\n        width= '100px'\n        type=\"text\"\n        variant=\"filled\"\n        defaultValue={schemaname}\n        value = {schemaname}\n        onChange={(e) => props.onSchemaChange(e, index, \"schemaName\")}\n    /> \n    }\n\n\n    return (\n        <div style={{  display: 'flex',flexDirection: 'column-reverse', overflow: 'scroll' }}>\n\n            {props.schemas.map((obj, index) => {\n                console.log('SCHEMAMAP', obj.jsonData.class.title)\n            console.log(\"index === \",index);\n          \n                   const propertiesVal = getFirstValueFromMap(obj.jsonData.class.definitions)\n                   console.log(\"propertiessss\",propertiesVal);\n                if (obj.minimized) {\n                    return <div\n                    onClick={clickFunction(index)}\n                        key={index}\n                        style={{\n                            border: `5px solid ${obj.type === 'class' ? '#9498DC' : obj.type === 'mixin' ? '#B582A3' : '#D66D6C'}`,\n                            height: '100px',\n                            minWidth: '300px',\n                            background: 'lightgrey',\n                            borderRadius: '10px',\n                            margin: '20px',\n                            padding: '10px'\n                        }}>\n                         {schemaNameTextfield(obj,index)}\n                        <Flex justifyContent=\"end\">\n                            <ActionButton width=\"size-115\" marginEnd=\"size-10\"\n                                onPress={() => props.onWindowAction(false, index)}\n                            >\n                                <Maximize />\n                            </ActionButton>\n                            <DialogTrigger>\n                                <ActionButton width=\"size-115\"><DeleteOutline /></ActionButton>\n                                <AlertDialog\n                                    variant=\"destructive\"\n                                    title={`Delete ${obj.type} Schema`}\n                                    primaryActionLabel=\"Delete\"\n                                    onPrimaryAction={() => props.deleteSchema(index)}\n                                    cancelLabel=\"Cancel\">\n                                    This will permanently delete the selected Schema. Continue?\n                                        </AlertDialog>\n                            </DialogTrigger>\n                        </Flex>\n\n                    </div>\n                } else {\n                    return <div\n                    onClick={clickFunction(index)}\n                        key={index}\n                        style={{\n                            border: `5px solid ${obj.type === 'class' ? '#9498DC' : obj.type === 'mixin' ? '#B582A3' : '#D66D6C'}`,\n                            height: '500px',\n                            minWidth: '640px',\n                            background: 'lightgrey',\n                            borderRadius: '10px',\n                            margin: '20px',\n                            padding: '10px',\n                             overflow: 'scroll',position:'relative'\n                        }}>\n\n                        <Flex justifyContent=\"end\">\n                            <ActionButton width=\"size-115\" marginEnd=\"size-10\"\n                                onPress={() => props.onWindowAction(true, index)}\n                            >\n                                <Minimize />\n                            </ActionButton>\n                            <DialogTrigger>\n                                <ActionButton width=\"size-115\"><DeleteOutline /></ActionButton>\n                                <AlertDialog\n                                    variant=\"destructive\"\n                                    title={`Delete ${obj.type} Schema`}\n                                    primaryActionLabel=\"Delete\"\n                                    onPrimaryAction={() => props.deleteSchema(index)}\n                                    cancelLabel=\"Cancel\">\n                                    This will permanently delete the selected Schema. Continue?\n                                        </AlertDialog>\n                            </DialogTrigger>\n                        </Flex>\n\n                        <div>\n                      \n                            {schemaNameTextfield(obj,index)}\n                            <TextField\n                                name=\"schemaTitle\"\n                                placeholder={obj.type === \"class\" ? \"Class Title\" : obj.type === \"mixin\" ? \"Mixin Title\" : \"Datatype Title\"}\n                                variant=\"filled\"\n                                width= '100px'\n                                defaultValue={obj.jsonData.class.title}\n                                value = {obj.jsonData.class.title}\n                                onChange={(e) => props.onSchemaChange(e, index, \"schemaTitle\")} />\n\n                            <TextField\n                                name=\"schemaDescription\"\n                                placeholder={obj.type === \"class\" ? \"Class Description\" : obj.type === \"mixin\" ? \"Mixin Description\" : \"Datatype Description\"}\n                                variant=\"filled\"\n                                width= '130px'\n                                defaultValue={obj.jsonData.class.description}\n                                value = {obj.jsonData.class.description}\n                                onChange={(e) => props.onSchemaChange(e, index, \"schemaDescription\")} />\n\n                            {obj.type === \"mixin\" ?\n                            <Picker  width= '160px' onSelectionChange={(e,index) => props.onmixinChange(e,index)} placeholder =\"Class Name\">\n                            <Item key=\"profile\">Profile</Item>\n                            <Item key=\"experience event\">Experience event</Item>\n                            <Item key=\"product\">Product</Item>\n                          </Picker>: null}\n\n                            {obj.type === \"class\" ?\n                            <Picker  width= '120px'  marginTop = '10px' onSelectionChange={(e,index) => props.onClassChange(e,index)} placeholder=\"Behaviour\">\n                            <Item key=\"record\">Record</Item>\n                            <Item key=\"timeseries\">Timeseries</Item>\n                          </Picker>\n                           \n                                : null}\n<Picker  width= '130px'  marginTop = '10px' onSelectionChange={(e) => props.onMetaStatusChange(e)} placeholder=\"Meta Status\">\n                           <Item key=\"experimental\">Experimental</Item>\n                           <Item key=\"stable\">Stable</Item>\n                         </Picker>\n                        </div>\n                        <br />\n                        <div style={{ marginLeft: '2.25rem' }}>\n                            <Button variant=\"contained\" onClick={(e) => props.addDynamicPropertyRow(index)} >Add Property</Button>\n\n                            <br /><br />\n                            <table>\n                                <tbody>\n                                    <tr>\n                                       {propertiesVal.properties.map((val,index1) => {\n                                          return  (renderHighLevelProperty1(val, index1, false,index))\n                                        } )}\n                                      \n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                }\n\n            })}\n\n\n        </div>)\n\n\n}\n\nexport default LeftPanel\n","import React, { useEffect, useState } from 'react'\nimport JSONInput from 'react-json-editor-ajrm'\nimport locale    from 'react-json-editor-ajrm/locale/en';\nimport { Octokit } from \"@octokit/core\";\nimport { ActionButton, Button } from '@react-spectrum/button';\nimport { AlertDialog, Dialog, DialogTrigger } from '@react-spectrum/dialog';\nimport { Heading } from '@react-spectrum/text';\nimport { Flex } from '@react-spectrum/layout';\nimport { Header, Divider, Content, Form, Footer, Checkbox, ButtonGroup, Text, TextField} from '@adobe/react-spectrum'\nimport Alias from '@spectrum-icons/workflow/Alias';\nimport Minimize from \"@spectrum-icons/workflow/Minimize\";\nimport Maximize from \"@spectrum-icons/workflow/Maximize\";\n\n\nconst RightPanel = (props) => {\n\n    // console.log('RIGHTPANEL', props)\n    const [jsonData, setJsonData] = useState({});\n    const [minimized , setMinimized] = useState(false)\n    // const [definitions, setDefinitions] = useState(getDefaultDefinitions());\n\n    \n    const [prTitle, setPrTitle] = useState(\"\");\n    const [prBody, setPrBody] = useState(\"\");\n    const [prBranch, setPrBranch] = useState(\"\");\n    const [prUsername, setPrUsername] = useState(\"\");\n    \n\n    const { createPullRequest } = require(\"octokit-plugin-create-pull-request\");\n    const MyOctokit = Octokit.plugin(createPullRequest);\n    const TOKEN = process.env.REACT_APP_TOKEN; // create token at https://github.com/settings/tokens/new?scopes=repo\n    const octokit = new MyOctokit({\n        auth: TOKEN,\n    });\n\n    useEffect(() => {\n        if (props.jsonData) {\n            // console.log('RIGHTPANEL', props.jsonData)\n            \n            let jsonString = JSON.stringify(props.jsonData)\n            // console.log(jsonString);\n            jsonString = jsonString.replace(\"definitionName\",props.schemaName)\n            if (props.type === 'mixin'){\n                jsonString = jsonString.replace(\"meta:extends\", \"meta:intendedToExtend\")\n            }\n            const copy = JSON.parse(jsonString);\n            setJsonData(copy)\n           \n        } else {\n            setJsonData(undefined)\n        }\n    }, [props.jsonData]) \n\n    const createPR = () => {\n        const files= {};\n      \n        {props.schemas.map((obj,index)=>{ //2\n            console.log(\"obj\",obj);\n            if (props.behaviour === \"\" && obj.type === 'mixin'){\n                alert('Please select behaviour')\n            }else{\n                console.log(props.schemaName);\n                console.log(obj.type);\n                console.log(prBody);\n                console.log(prBranch);\n                console.log(jsonData);\n                console.log(process.env.REACT_APP_TOKEN)\n\n                let jsonString = JSON.stringify(obj.jsonData.class)\n                // console.log(jsonString);\n                jsonString = jsonString.replace(\"definitionName\",obj.jsonData.schemaName)\n               //path = components/mixins/profile\n               let xdmPah = \"\"\n               if (obj.type === 'mixin'){\n               \n                console.log(obj.jsonData)\n                jsonString = jsonString.replace(\"meta:extends\", \"meta:intendedToExtend\")\n                // schemaname = obj.jsonData.class[\"meta:intendedToExtend\"]\n                // let val = schemaname.split('/');\n                // schemaname = val[val.length-1]\n                xdmPah = `components/mixins/${obj.jsonData.behaviour}/${obj.jsonData.schemaName}.schema.json`\n            }else{\n                xdmPah = `components/classes/${obj.jsonData.schemaName}.schema.json`\n            }\n            const copy = JSON.parse(jsonString);\n            console.log(copy);\n            files[xdmPah] = {\n                content:  JSON.stringify(copy, null, \"\\t\")  \n            };\n        \n            }\n        })}\n        octokit\n        .createPullRequest({\n            owner: \"adobe\",\n            repo: \"xdm\",\n            title: `${prTitle} Created by ${prUsername}`,\n            body: `${prBody} `,\n            base: \"master\" /* optional: defaults to default branch */,\n            head: `${prBranch}`,\n           \n            changes: [\n                {\n                    files: files,\n                    commit: `commiting json file`,\n                },\n            ],\n        })\n        .then((pr) => {\n            console.log(pr.data.number)\n            alert(\"PR Created\")\n            setPrTitle('');\n            setPrBody('');\n            setPrBranch('');\n            setPrUsername('');\n        });\n        \n    };\n\n  \n\n    const onWindowAction = (val) => {\n        setMinimized(val)\n    }\n    \n    function IsValidJSONString(str) {\n        try {\n            JSON.parse(JSON.stringify(str));\n        } catch (e) {\n            return false;\n        }\n        return true;\n    }\n\n    const onChangeJson = (e)  => {\n        const validjson = IsValidJSONString(e)\n            if (validjson){\n                 return  props.getobjectfromJson(e)\n            }\n        \n    }\n\n    return (\n        <div style={{display: 'flex', flexDirection: 'column', width: '100%', margin: '5px' ,backgroundColor : '#1E1E1E' }}>\n        {!minimized ? <div >\n        <div style={{position: 'absolute', right: '30px', bottom: '10px', margin: '10px', zIndex: '10'}}>\n        <ActionButton width=\"size-115\" marginEnd=\"size-10\"\n                                onPress={() => onWindowAction(true)}\n                            >\n                                <Minimize/>\n                            </ActionButton>\n            <DialogTrigger>\n            \n                <ActionButton width=\"size-100\"><Alias></Alias></ActionButton>\n                {(close) => (\n                    <Dialog>\n                    <Heading>\n                        <Flex alignItems=\"center\" gap=\"size-100\">\n                        {/* <Book size=\"S\" /> */}\n                        <Text>Create a Pull Request</Text>\n                        </Flex>\n                    </Heading>\n\n                    <Divider />\n                    <Content>\n                        <Form>\n                        <TextField label=\"Title\" placeholder=\"Pull Request Title\" autoFocus  onChange={setPrTitle} />\n                        <TextField label=\"Description\" placeholder=\"Pull Request Description\" onChange={setPrBody} />\n                        <TextField label=\"Branch\" placeholder=\"main\" onChange={setPrBranch}/>\n                        <TextField label=\"Username\" placeholder=\"mprabhak@adobe.com\" onChange={setPrUsername} />\n                        </Form>\n                    </Content>\n                    <Footer>\n                        {/* <Checkbox>\n                        I want to receive updates for exclusive offers in my area.\n                        </Checkbox> */}\n                    </Footer>\n                    <ButtonGroup>\n                        <Button variant=\"secondary\" onPress={close}>\n                        Cancel\n                        </Button>\n                        <Button variant=\"cta\" onPress={close} onPress={() => {createPR(); }}>\n                        Create\n                        </Button>\n                    </ButtonGroup>\n                    </Dialog>\n                )}\n            </DialogTrigger>\n            \n        \n        </div>\n        <JSONInput\n            id=\"json-panel-1\"\n            placeholder={ jsonData ?? {}} // data to display\n            locale={locale}\n            confirmGood={false}\n            // reset={true}\n            width=\"100%\"\n            height=\"100%\"\n            onChange = {(e) => onChangeJson(e.jsObject)}\n            colors={{\n                string: \"#DAA520\" // overrides theme colors with whatever color value you want\n            }}\n            // height=\"100%\"\n        />\n        \n    </div> : <div> <ActionButton width=\"size-115\" marginEnd=\"size-10\"\n                                onPress={() => onWindowAction(false)}\n                            >\n                                <Maximize/>\n                            </ActionButton></div>}\n        </div>\n    )\n}\n\nexport default RightPanel\n","import { Splitter, SplitterPanel } from 'primereact/splitter'\nimport LeftPanel from './LeftPanel'\nimport RightPanel from './rightPanel'\nimport './Schema2.css'\nimport React, { useState,useEffect } from \"react\";\nimport 'primeicons/primeicons.css';\nimport 'primereact/resources/themes/saga-blue/theme.css';\nimport 'primereact/resources/primereact.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { addPropertyHandler, plusHandler, updateValue, deleteProp } from \"./xdm2\";\nimport { ActionButton } from '@react-spectrum/button';\n\n\nconst baseObject = {\n    \"meta:license\": [\n        \"Copyright 2020 Adobe Systems Incorporated. All rights reserved.\",\n        \"This work is licensed under a Creative Commons Attribution 4.0 International (CC BY 4.0) license\",\n        \"you may not use this file except in compliance with the License. You may obtain a copy of the License at https://creativecommons.org/licenses/by/4.0/\"\n    ],\n    \"$id\": \"https://ns.adobe.com/xdm/\",\n    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n    \"title\": \"\",\n    \"type\": \"object\",\n\n    \"meta:extensible\": true, // ALL ARE TRUE EXCEPT WHEN USER SELECTS SCHEMA\n    \"meta:abstract\": true, // ALL ARE TRUE EXCEPT SELECTS SCHEMA\n    \"meta:extends\": [\n        \"https://ns.adobe.com/xdm/data/\"\n      ],\n    \"description\" : \"\",\n   \n    \"definitions\": {\"definitionName\": { //defination name\n        \"properties\": []\n    }},\n    \"allOf\": [],\n    \"meta:Status\": \"experimental\"\n}\n\n\n// MAIN COMPONENT\nconst Schema2 = () => {\n\n    const schemaTypes = [\n        {type: 'class', label: 'Add Class', style: {background: '#9498DC'}},\n        {type: 'mixin', label: 'Add Mixin', style: {background: '#B582A3'}},\n        // {type: 'dataType', label: 'Add DT', style: {background: '#D66D6C'}}\n    ];\n     \n    const [schemaName, setschemaName] = useState('');\n    \n    const [behaviour, setbehaviour] = useState('');\n\n    const [currentIndex , setCurrentIndex] = useState(0);\n    const [schemaObjects, setSchemaObjects] = useState([]) //schemaObjects[currentIndex]\n\n\n\n    //for adding the properties\n    const handleInputChange = (e, changingProp, objKey) => {  //e = input value , objKey : index of property\n        console.log(\"AASSSSS\",e);\n        //const activeSchemaCopy = JSON.parse(JSON.stringify(activeSchema));\n        const schemaObjectsCopy = JSON.parse(JSON.stringify(schemaObjects));\n        var keyobj = objKey.toString(); //\n        var definationCopy = {}\n        if (keyobj.includes(\".\")){\n            const keysArr = objKey.split(\".\");\n            definationCopy = schemaObjectsCopy[keysArr[0]].jsonData.class.definitions \n        }else{\n            definationCopy =   schemaObjectsCopy[currentIndex].jsonData.class.definitions\n        }\n        // var definationCopy =   schemaObjectsCopy[objKey].jsonData.class.definitions \n        const newDefinitions = updateValue(definationCopy, objKey, changingProp, e); //calling functionto update\n        // setDefinitions({ \"CLAZZ\": newDefinitions.CLAZZ });\n         definationCopy = newDefinitions\n        if (keyobj.includes(\".\")){\n            const keysArr = objKey.split(\".\"); \n            //activeSchemaCopy.jsonData.class.definitions = definationCopy\n            //console.log(activeSchemaCopy.jsonData.adddefination);\n            schemaObjectsCopy[keysArr[0]].jsonData.class.definitions = definationCopy\n        }else{\n            //activeSchemaCopy.jsonData.class.definitions = definationCopy\n            //console.log(activeSchemaCopy.jsonData.definition);\n            schemaObjectsCopy[currentIndex].jsonData.class.definitions = definationCopy\n        }\n      \n        //setActiveSchema(activeSchemaCopy);\n        setSchemaObjects(schemaObjectsCopy);\n        // setDefinitions(getDefaultDefinitions())\n    };\n\n    //for adding plus property || nested structure\n    const handlePlusChange = (e, objKey,index) => {\n        console.log(e.target.name);\n        // setActiveSchema(schemaObjects[currentIndex])\n        //console.log(activeSchema);\n        //const activeSchemaCopy = JSON.parse(JSON.stringify(activeSchema));\n        const schemaObjectsCopy = JSON.parse(JSON.stringify(schemaObjects));\n        var keyobj = objKey.toString(); \n        var definationCopy = {}\n        if (keyobj.includes(\".\")){\n            const keysArr = objKey.split(\".\");\n            definationCopy = schemaObjectsCopy[index].jsonData.class.definitions \n        }else{\n            definationCopy =   schemaObjectsCopy[index].jsonData.class.definitions\n        }\n          \n        const newDefinitions = plusHandler(definationCopy, objKey);\n        // setDefinitions({\"CLAZZ\": newDefinitions.CLAZZ} )\n        definationCopy = newDefinitions\n       if (keyobj.includes(\".\")){\n           const keysArr = objKey.split(\".\"); \n        //    activeSchemaCopy.jsonData.class.definitions = definationCopy\n        //    console.log(activeSchemaCopy.jsonData.adddefination);\n           schemaObjectsCopy[index].jsonData.class.definitions = definationCopy\n        //    setActiveSchema(activeSchemaCopy);\n           setSchemaObjects(schemaObjectsCopy);\n       }else{\n        //    activeSchemaCopy.jsonData.class.definitions = definationCopy\n        //    console.log(activeSchemaCopy.jsonData.definition);\n           schemaObjectsCopy[index].jsonData.class.definitions = definationCopy\n        //    setActiveSchema(activeSchemaCopy);\n           setSchemaObjects(schemaObjectsCopy);\n       }\n        \n    };\n\n    //closures\n    const updateHandlerFactory = (changingProp, objKey) => {\n        return (e) => {\n            handleInputChange(e, changingProp, objKey);\n        }\n    }\n\n    const plusHandlerFactory = (objKey,index) => {\n        return (e) => {\n\n            setCurrentIndex(index)\n            console.log(\"currentindex\", index);\n            handlePlusChange(e, objKey,index);\n           \n        }\n    }\n    \n    const addDynamicPropertyRow = (index) => {\n        const activeSchemaCopy1 = JSON.parse(JSON.stringify(schemaObjects[index]));\n        console.log(\"clicked add properties\");\n        const newDefinitions = addPropertyHandler(activeSchemaCopy1.jsonData.class.definitions);\n        // setDefinitions([...definitions,{ \"CLAZZ\": newDefinitions.CLAZZ }]);\n        setCurrentIndex(index)\n        // setDefinitions({\"CLAZZ\": newDefinitions.CLAZZ} )\n        // const activeSchemaCopy = JSON.parse(JSON.stringify(activeSchema));\n        const schemaObjectsCopy = JSON.parse(JSON.stringify(schemaObjects));\n        // activeSchemaCopy.jsonData.class.definitions = newDefinitions\n        schemaObjectsCopy[index].jsonData.class.definitions = newDefinitions\n        // setActiveSchema(activeSchemaCopy);\n        setSchemaObjects(schemaObjectsCopy);\n        // setDefinitions(getDefaultDefinitions())\n    }\n\n    const deleteProperty = (i,currentindex) => {\n       \n        // setDefinitions([...definitions,{ \"CLAZZ\": result.CLAZZ }]);\n        // setDefinitions({\"CLAZZ\": result.CLAZZ} )\n        // const activeSchemaCopy = JSON.parse(JSON.stringify(activeSchema));\n        const schemaObjectsCopy = JSON.parse(JSON.stringify(schemaObjects));\n        const deleteDefination = schemaObjects[currentIndex].jsonData.class.definitions\n        // console.log(activeSchemaCopy);\n        const result = deleteProp(deleteDefination, i);\n        // activeSchemaCopy.jsonData.class.definitions = result\n        schemaObjectsCopy[currentindex].jsonData.class.definitions = result\n        // setActiveSchema(activeSchemaCopy);\n        setSchemaObjects(schemaObjectsCopy);\n        // setDefinitions(getDefaultDefinitions())\n    }\n    \n\n\n    // dummy state\n   \n    // const [activeSchema, setActiveSchema1] = useState(undefined)\n\n    /* const setActiveSchema = (obj) => {\n        console.log(\"setActive Schemma called\");\n        console.log(obj);\n        console.log(\"setActive Schemma done\");\n        setActiveSchema1(obj);\n    }\n    */\n\n    const onDeleteSchema = (i) => {\n\n        // Create a copy of the schemaObjects, delete at index on the copy, set copy as new schemaObjects\n        let schemObjectsCP = JSON.parse(JSON.stringify(schemaObjects));\n        // setActiveSchema(undefined);\n        setSchemaObjects(schemObjectsCP.filter((item, index) => index !== i));\n\n     }\n\n     const onClassChange = (e,index) => {\n        // console.log(e.value.name);\n        // setClassName(e.value);\n        const schemaObjectsCopy = JSON.parse(JSON.stringify(schemaObjects));\n        schemaObjectsCopy[currentIndex].jsonData.class[\"meta:extends\"] = `https://ns.adobe.com/xdm/data/${e}`\n        setbehaviour(e)\n        schemaObjectsCopy[currentIndex].jsonData.behaviour = e\n        setSchemaObjects(schemaObjectsCopy);\n    }\n\n    const onmixinChange = (e,index) => {\n        // setMixinBehaviour(e.value);\n        const schemaObjectsCopy = JSON.parse(JSON.stringify(schemaObjects));\n        schemaObjectsCopy[currentIndex].jsonData.class[\"meta:extends\"] = `https://ns.adobe.com/xdm/classes/${e}`\n        setbehaviour(e)\n        schemaObjectsCopy[currentIndex].jsonData.behaviour = e\n        setSchemaObjects(schemaObjectsCopy);\n    }\n\n    const onMetaStatusChange = (e) => {\n        // setMixinBehaviour(e.value);\n        const schemaObjectsCopy = JSON.parse(JSON.stringify(schemaObjects));\n        schemaObjectsCopy[currentIndex].jsonData.class[\"meta:Status\"] = e\n        \n        setSchemaObjects(schemaObjectsCopy);\n    }\n\n//handling input for name, title\n    const onSchemaChangeHandler = (e,index,name) => {\n        console.log(\"name\",e);\n        // const activeSchemaCopy = JSON.parse(JSON.stringify(activeSchema));\n        const schemaObjectsCopy = JSON.parse(JSON.stringify(schemaObjects));\n        // console.log(activeSchemaCopy.jsonData);\n        setCurrentIndex(index)\n        switch (name) {\n            case \"schemaName\":\n                setschemaName(e);\n                // activeSchemaCopy.jsonData.class.$id = `https://ns.adobe.com/xdm/Class/${e}`\n                let type = ''\n                if (schemaObjectsCopy[index].type === 'class'){\n                    type = 'classes'\n                }else{\n                    type = 'mixins'\n                }\n                schemaObjectsCopy[index].jsonData.class.$id = `https://ns.adobe.com/xdm/${type}/${e}`;\n                schemaObjectsCopy[currentIndex].jsonData.class[\"meta:extends\"] = `https://ns.adobe.com/xdm/data/${behaviour}`\n                // activeSchemaCopy.jsonData.class.allOf = [{'$ref':`#/definitions/${e}`}];\n                schemaObjectsCopy[index].jsonData.class.allOf =[{'$ref':`#/definitions/${e}`}];\n                // let jsonString = JSON.stringify(schemaObjectsCopy[index].jsonData.class)\n                // const propertiesVal = getFirstKeyFromMap(schemaObjectsCopy[index].jsonData.class.definitions)\n                // console.log(JSON.stringify(schemaObjectsCopy[index].jsonData.class));\n                // jsonString = jsonString.replace(propertiesVal,e)\n                // let copy =  JSON.parse(jsonString)\n                // schemaObjectsCopy[index].jsonData.class = copy\n                schemaObjectsCopy[index].jsonData.schemaName = e\n                \n                break;\n                case \"schemaTitle\":\n                    // setschemaTitle(e);\n                    // activeSchemaCopy.jsonData.class.title = e\n                    schemaObjectsCopy[index].jsonData.class.title = e;\n                    break;\n            case \"schemaDescription\":\n                // setDescription(e);\n                // activeSchemaCopy.jsonData.class.description = e\n                schemaObjectsCopy[index].jsonData.class.description = e;\n                break;\n                \n        }\n        // console.log('COPY', activeSchemaCopy);\n        // console.log('activeSchema', activeSchema)\n        \n        // setActiveSchema(activeSchemaCopy);\n        setSchemaObjects(schemaObjectsCopy);\n    }\n\n    const getobjectfromJson = (e) => {\n        const schemaObjectsCopy = JSON.parse(JSON.stringify(schemaObjects));\n        schemaObjectsCopy[currentIndex].jsonData.class = e;\n        setSchemaObjects(schemaObjectsCopy);\n    }\n\n    const onWindowAction = (isMinimized, index) => {\n        console.log('HERE', isMinimized, index)\n        // Make copies\n        // const activeSchemaCopy = JSON.parse(JSON.stringify(activeSchema));\n        const schemaObjectsCopy = JSON.parse(JSON.stringify(schemaObjects));\n        // change values\n        // activeSchemaCopy.minimized = isMinimized;\n        schemaObjectsCopy[index].minimized = isMinimized;\n\n        // setActiveSchema(activeSchemaCopy);\n        setSchemaObjects(schemaObjectsCopy);\n    }\n\n    const onAddSchema = async (type) => {\n        let schemaObjectsCP = JSON.parse(JSON.stringify(schemaObjects));\n        if (schemaObjectsCP.length !== 0){\n            const latestIndex = schemaObjectsCP.length + 1\n            setCurrentIndex(latestIndex-1)\n        }else{\n            setCurrentIndex(0)\n        }\n        console.log(currentIndex );\n        switch (type) {\n            case 'class':\n                const classSchema = {type: 'class', minimized: false, jsonData: {class:baseObject , schemaName : schemaName,behaviour :behaviour} \n                };\n                // setActiveSchema(classSchema)\n                schemaObjectsCP.push(classSchema);\n                // setschemaType(\"Class\")\n                setSchemaObjects(schemaObjectsCP);\n                break;\n            case 'mixin':\n                const mixinSchema = {type: 'mixin', minimized: false,  jsonData: {class:baseObject , schemaName : schemaName,behaviour :behaviour} \n                };\n                // setActiveSchema(mixinSchema)\n                schemaObjectsCP.push(mixinSchema);\n                setSchemaObjects(schemaObjectsCP);\n                console.log(schemaObjects);\n                break;\n            // case 'dataType':\n            //     const dataTypeSchema = {type: 'dataType', minimized: false,  jsonData: {class:baseObject } \n            // };\n            //     setActiveSchema(dataTypeSchema)\n            //     schemaObjectsCP.push(dataTypeSchema);\n            //     setSchemaObjects(schemaObjectsCP);\n            //     break;\n            default:\n                break;\n        }\n    }\n    \n\n    return (<>\n        {/* Navigation Bar */}\n        <div style={{ background: \"linear-gradient(to left, #e66465, #9198e5)\", color: 'white', height : 48,textAlign : \"center\", paddingTop : 10}}>Experience Data Model (XDM) Tool 2.0</div>\n        \n        {/* Main Container */}\n        <div style={{width: '100%', height: '100vh', background: 'blue', display: 'flex'}}>\n            {/* Control Panel */}\n            <div style={{background: '#DEE2E6', width: '120px', padding: '10px'}}>\n\n                {\n                    schemaTypes.map((schemaType, index) => {\n                        return <ActionButton key={index} width=\"100px\" marginBottom=\"10px\"\n                        UNSAFE_style={{...schemaType.style, color: '#ffffff'}} \n                        onPress={() => onAddSchema(schemaType.type)}>\n                            {schemaType.label}\n                        </ActionButton>\n                    })\n                }\n                \n            </div>\n\n            {/* Left and Right Splitter Pane */}\n            <Splitter style={{height: '100%', width: '100%'}} layout=\"horizontal\">\n                <SplitterPanel  >\n                    <LeftPanel   onWindowAction={(type, index) => onWindowAction(type, index)}\n                     onSchemaChange={(e, index,name) => onSchemaChangeHandler(e, index,name)}\n                     schemas={schemaObjects} \n                     deleteSchema={(index) => onDeleteSchema(index)}\n                    //  schemaDescription = {schemadescription}\n                    //  schemaTitle = {schemaTitle}\n                     behaviour = {behaviour}\n                     updateHandlerFactory = {updateHandlerFactory}\n                     addDynamicPropertyRow = {(index)=>addDynamicPropertyRow(index)}\n                    //  definitions = {definitions}\n                     plusHandlerFactory = {plusHandlerFactory}\n                     onClassChange = {(e,index) => onClassChange(e,index)}\n                     onmixinChange = {(e,index) => onmixinChange(e,index)}\n                     deleteProperty = {deleteProperty}\n                     currentIndex = {(index) => setCurrentIndex(index)}\n                     schemaName = {schemaName}\n                     onMetaStatusChange = {(e)=> onMetaStatusChange(e)}\n                     setschemaName = {(e) => setschemaName(e)}\n                    //  refreshpage = { () => refreshpage()}\n                    //  resumePage = {() => resumePage()}\n                    //  setActiveSchema={(index) => setActiveSchema(schemaObjects[index])}\n\n                   />\n\n                </SplitterPanel>\n                <SplitterPanel size={22}>\n                    {/* {console.log('ACTIVESCHEMA', activeSchema?.jsonData ?? undefined)} */}\n                    <RightPanel jsonData={schemaObjects[currentIndex]?.jsonData.class ??undefined} //\n                    getobjectfromJson = {(e) => getobjectfromJson(e)}\n                    schemaName = {schemaName}\n                    behaviour = {behaviour}\n                    schemas={schemaObjects} \n                    type =  {schemaObjects[currentIndex]?.type ?? \"\"}/>\n                </SplitterPanel>\n            </Splitter>\n\n        </div>\n\n    </>)\n}\n\nexport default Schema2\n","import './App.css';\nimport Schema2 from './Schema2';\nfunction App() {\n  return (\n    <Schema2/>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider, defaultTheme} from '@adobe/react-spectrum';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider theme={defaultTheme} colorScheme=\"light\">\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}